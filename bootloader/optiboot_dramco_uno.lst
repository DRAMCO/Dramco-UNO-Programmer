
optiboot_dramco_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000236  2**0
                  CONTENTS, READONLY
  3 .stab         00000bdc  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e1f  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	84 b7       	in	r24, 0x34	; 52
    7e04:	14 be       	out	0x34, r1	; 52
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	e4 d0       	rcall	.+456    	; 0x7fd2 <appStart>
    7e0a:	82 e0       	ldi	r24, 0x02	; 2
    7e0c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e10:	88 e1       	ldi	r24, 0x18	; 24
    7e12:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7e16:	96 e0       	ldi	r25, 0x06	; 6
    7e18:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7e1c:	90 e1       	ldi	r25, 0x10	; 16
    7e1e:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7e22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7e26:	8e e0       	ldi	r24, 0x0E	; 14
    7e28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7e2c:	22 9a       	sbi	0x04, 2	; 4
    7e2e:	c0 e0       	ldi	r28, 0x00	; 0
    7e30:	d0 e0       	ldi	r29, 0x00	; 0
    7e32:	1a 9a       	sbi	0x03, 2	; 3
    7e34:	a9 d0       	rcall	.+338    	; 0x7f88 <getch>
    7e36:	81 34       	cpi	r24, 0x41	; 65
    7e38:	81 f4       	brne	.+32     	; 0x7e5a <main+0x5a>
    7e3a:	a6 d0       	rcall	.+332    	; 0x7f88 <getch>
    7e3c:	18 2f       	mov	r17, r24
    7e3e:	b0 d0       	rcall	.+352    	; 0x7fa0 <verifySpace>
    7e40:	12 38       	cpi	r17, 0x82	; 130
    7e42:	19 f4       	brne	.+6      	; 0x7e4a <main+0x4a>
    7e44:	84 e0       	ldi	r24, 0x04	; 4
    7e46:	99 d0       	rcall	.+306    	; 0x7f7a <putch>
    7e48:	95 c0       	rjmp	.+298    	; 0x7f74 <main+0x174>
    7e4a:	11 38       	cpi	r17, 0x81	; 129
    7e4c:	19 f4       	brne	.+6      	; 0x7e54 <main+0x54>
    7e4e:	84 e0       	ldi	r24, 0x04	; 4
    7e50:	94 d0       	rcall	.+296    	; 0x7f7a <putch>
    7e52:	90 c0       	rjmp	.+288    	; 0x7f74 <main+0x174>
    7e54:	83 e0       	ldi	r24, 0x03	; 3
    7e56:	91 d0       	rcall	.+290    	; 0x7f7a <putch>
    7e58:	8d c0       	rjmp	.+282    	; 0x7f74 <main+0x174>
    7e5a:	82 34       	cpi	r24, 0x42	; 66
    7e5c:	19 f4       	brne	.+6      	; 0x7e64 <main+0x64>
    7e5e:	84 e1       	ldi	r24, 0x14	; 20
    7e60:	ab d0       	rcall	.+342    	; 0x7fb8 <getNch>
    7e62:	88 c0       	rjmp	.+272    	; 0x7f74 <main+0x174>
    7e64:	85 34       	cpi	r24, 0x45	; 69
    7e66:	19 f4       	brne	.+6      	; 0x7e6e <main+0x6e>
    7e68:	85 e0       	ldi	r24, 0x05	; 5
    7e6a:	a6 d0       	rcall	.+332    	; 0x7fb8 <getNch>
    7e6c:	83 c0       	rjmp	.+262    	; 0x7f74 <main+0x174>
    7e6e:	85 35       	cpi	r24, 0x55	; 85
    7e70:	49 f4       	brne	.+18     	; 0x7e84 <main+0x84>
    7e72:	8a d0       	rcall	.+276    	; 0x7f88 <getch>
    7e74:	c8 2f       	mov	r28, r24
    7e76:	88 d0       	rcall	.+272    	; 0x7f88 <getch>
    7e78:	d0 e0       	ldi	r29, 0x00	; 0
    7e7a:	d8 2b       	or	r29, r24
    7e7c:	cc 0f       	add	r28, r28
    7e7e:	dd 1f       	adc	r29, r29
    7e80:	8f d0       	rcall	.+286    	; 0x7fa0 <verifySpace>
    7e82:	78 c0       	rjmp	.+240    	; 0x7f74 <main+0x174>
    7e84:	86 35       	cpi	r24, 0x56	; 86
    7e86:	29 f4       	brne	.+10     	; 0x7e92 <main+0x92>
    7e88:	84 e0       	ldi	r24, 0x04	; 4
    7e8a:	96 d0       	rcall	.+300    	; 0x7fb8 <getNch>
    7e8c:	80 e0       	ldi	r24, 0x00	; 0
    7e8e:	75 d0       	rcall	.+234    	; 0x7f7a <putch>
    7e90:	71 c0       	rjmp	.+226    	; 0x7f74 <main+0x174>
    7e92:	84 36       	cpi	r24, 0x64	; 100
    7e94:	09 f0       	breq	.+2      	; 0x7e98 <main+0x98>
    7e96:	42 c0       	rjmp	.+132    	; 0x7f1c <main+0x11c>
    7e98:	77 d0       	rcall	.+238    	; 0x7f88 <getch>
    7e9a:	76 d0       	rcall	.+236    	; 0x7f88 <getch>
    7e9c:	f8 2e       	mov	r15, r24
    7e9e:	74 d0       	rcall	.+232    	; 0x7f88 <getch>
    7ea0:	c1 15       	cp	r28, r1
    7ea2:	80 e7       	ldi	r24, 0x70	; 112
    7ea4:	d8 07       	cpc	r29, r24
    7ea6:	38 f4       	brcc	.+14     	; 0x7eb6 <main+0xb6>
    7ea8:	83 e0       	ldi	r24, 0x03	; 3
    7eaa:	fe 01       	movw	r30, r28
    7eac:	87 bf       	out	0x37, r24	; 55
    7eae:	e8 95       	spm
    7eb0:	00 e0       	ldi	r16, 0x00	; 0
    7eb2:	11 e0       	ldi	r17, 0x01	; 1
    7eb4:	02 c0       	rjmp	.+4      	; 0x7eba <main+0xba>
    7eb6:	00 e0       	ldi	r16, 0x00	; 0
    7eb8:	11 e0       	ldi	r17, 0x01	; 1
    7eba:	66 d0       	rcall	.+204    	; 0x7f88 <getch>
    7ebc:	f8 01       	movw	r30, r16
    7ebe:	81 93       	st	Z+, r24
    7ec0:	8f 01       	movw	r16, r30
    7ec2:	fe 12       	cpse	r15, r30
    7ec4:	fa cf       	rjmp	.-12     	; 0x7eba <main+0xba>
    7ec6:	c1 15       	cp	r28, r1
    7ec8:	f0 e7       	ldi	r31, 0x70	; 112
    7eca:	df 07       	cpc	r29, r31
    7ecc:	20 f0       	brcs	.+8      	; 0x7ed6 <main+0xd6>
    7ece:	83 e0       	ldi	r24, 0x03	; 3
    7ed0:	fe 01       	movw	r30, r28
    7ed2:	87 bf       	out	0x37, r24	; 55
    7ed4:	e8 95       	spm
    7ed6:	64 d0       	rcall	.+200    	; 0x7fa0 <verifySpace>
    7ed8:	07 b6       	in	r0, 0x37	; 55
    7eda:	00 fc       	sbrc	r0, 0
    7edc:	fd cf       	rjmp	.-6      	; 0x7ed8 <main+0xd8>
    7ede:	fe 01       	movw	r30, r28
    7ee0:	a0 e0       	ldi	r26, 0x00	; 0
    7ee2:	b1 e0       	ldi	r27, 0x01	; 1
    7ee4:	8c 91       	ld	r24, X
    7ee6:	11 96       	adiw	r26, 0x01	; 1
    7ee8:	2c 91       	ld	r18, X
    7eea:	11 97       	sbiw	r26, 0x01	; 1
    7eec:	90 e0       	ldi	r25, 0x00	; 0
    7eee:	92 2b       	or	r25, r18
    7ef0:	21 e0       	ldi	r18, 0x01	; 1
    7ef2:	0c 01       	movw	r0, r24
    7ef4:	27 bf       	out	0x37, r18	; 55
    7ef6:	e8 95       	spm
    7ef8:	11 24       	eor	r1, r1
    7efa:	32 96       	adiw	r30, 0x02	; 2
    7efc:	12 96       	adiw	r26, 0x02	; 2
    7efe:	a0 38       	cpi	r26, 0x80	; 128
    7f00:	81 e0       	ldi	r24, 0x01	; 1
    7f02:	b8 07       	cpc	r27, r24
    7f04:	79 f7       	brne	.-34     	; 0x7ee4 <main+0xe4>
    7f06:	85 e0       	ldi	r24, 0x05	; 5
    7f08:	fe 01       	movw	r30, r28
    7f0a:	87 bf       	out	0x37, r24	; 55
    7f0c:	e8 95       	spm
    7f0e:	07 b6       	in	r0, 0x37	; 55
    7f10:	00 fc       	sbrc	r0, 0
    7f12:	fd cf       	rjmp	.-6      	; 0x7f0e <main+0x10e>
    7f14:	81 e1       	ldi	r24, 0x11	; 17
    7f16:	87 bf       	out	0x37, r24	; 55
    7f18:	e8 95       	spm
    7f1a:	2c c0       	rjmp	.+88     	; 0x7f74 <main+0x174>
    7f1c:	84 37       	cpi	r24, 0x74	; 116
    7f1e:	a9 f4       	brne	.+42     	; 0x7f4a <main+0x14a>
    7f20:	33 d0       	rcall	.+102    	; 0x7f88 <getch>
    7f22:	32 d0       	rcall	.+100    	; 0x7f88 <getch>
    7f24:	18 2f       	mov	r17, r24
    7f26:	30 d0       	rcall	.+96     	; 0x7f88 <getch>
    7f28:	3b d0       	rcall	.+118    	; 0x7fa0 <verifySpace>
    7f2a:	01 2f       	mov	r16, r17
    7f2c:	fe 01       	movw	r30, r28
    7f2e:	7f 01       	movw	r14, r30
    7f30:	8f ef       	ldi	r24, 0xFF	; 255
    7f32:	e8 1a       	sub	r14, r24
    7f34:	f8 0a       	sbc	r15, r24
    7f36:	84 91       	lpm	r24, Z
    7f38:	20 d0       	rcall	.+64     	; 0x7f7a <putch>
    7f3a:	01 50       	subi	r16, 0x01	; 1
    7f3c:	f7 01       	movw	r30, r14
    7f3e:	b9 f7       	brne	.-18     	; 0x7f2e <main+0x12e>
    7f40:	21 96       	adiw	r28, 0x01	; 1
    7f42:	11 50       	subi	r17, 0x01	; 1
    7f44:	c1 0f       	add	r28, r17
    7f46:	d1 1d       	adc	r29, r1
    7f48:	15 c0       	rjmp	.+42     	; 0x7f74 <main+0x174>
    7f4a:	85 37       	cpi	r24, 0x75	; 117
    7f4c:	41 f4       	brne	.+16     	; 0x7f5e <main+0x15e>
    7f4e:	28 d0       	rcall	.+80     	; 0x7fa0 <verifySpace>
    7f50:	8e e1       	ldi	r24, 0x1E	; 30
    7f52:	13 d0       	rcall	.+38     	; 0x7f7a <putch>
    7f54:	85 e9       	ldi	r24, 0x95	; 149
    7f56:	11 d0       	rcall	.+34     	; 0x7f7a <putch>
    7f58:	8f e0       	ldi	r24, 0x0F	; 15
    7f5a:	0f d0       	rcall	.+30     	; 0x7f7a <putch>
    7f5c:	0b c0       	rjmp	.+22     	; 0x7f74 <main+0x174>
    7f5e:	81 35       	cpi	r24, 0x51	; 81
    7f60:	41 f4       	brne	.+16     	; 0x7f72 <main+0x172>
    7f62:	88 e1       	ldi	r24, 0x18	; 24
    7f64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7f68:	88 e0       	ldi	r24, 0x08	; 8
    7f6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7f6e:	18 d0       	rcall	.+48     	; 0x7fa0 <verifySpace>
    7f70:	01 c0       	rjmp	.+2      	; 0x7f74 <main+0x174>
    7f72:	16 d0       	rcall	.+44     	; 0x7fa0 <verifySpace>
    7f74:	80 e1       	ldi	r24, 0x10	; 16
    7f76:	01 d0       	rcall	.+2      	; 0x7f7a <putch>
    7f78:	5c cf       	rjmp	.-328    	; 0x7e32 <main+0x32>

00007f7a <putch>:
  LED_PORT &= ~_BV(LED);
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7f7a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f7e:	95 ff       	sbrs	r25, 5
    7f80:	fc cf       	rjmp	.-8      	; 0x7f7a <putch>
  UDR0 = ch;
    7f82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f86:	08 95       	ret

00007f88 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7f88:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f8c:	87 ff       	sbrs	r24, 7
    7f8e:	fc cf       	rjmp	.-8      	; 0x7f88 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7f90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f94:	84 fd       	sbrc	r24, 4
    7f96:	01 c0       	rjmp	.+2      	; 0x7f9a <getch+0x12>
       * watchdog.  This should cause the bootloader to abort and run
       * the application "soon", if it keeps happening.  (Note that we
       * don't care that an invalid char is returned...)
       */
    //watchdogReset();
    __asm__ __volatile__ (
    7f98:	a8 95       	wdr
      "wdr\n"
    );
  }
  
  ch = UDR0;
    7f9a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f9e:	08 95       	ret

00007fa0 <verifySpace>:
void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
    7fa0:	f3 df       	rcall	.-26     	; 0x7f88 <getch>
    7fa2:	80 32       	cpi	r24, 0x20	; 32
    7fa4:	39 f0       	breq	.+14     	; 0x7fb4 <verifySpace+0x14>
    7fa6:	88 e1       	ldi	r24, 0x18	; 24
    7fa8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7fac:	88 e0       	ldi	r24, 0x08	; 8
    7fae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7fb2:	ff cf       	rjmp	.-2      	; 0x7fb2 <verifySpace+0x12>
    7fb4:	84 e1       	ldi	r24, 0x14	; 20
    7fb6:	e1 cf       	rjmp	.-62     	; 0x7f7a <putch>

00007fb8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fb8:	cf 93       	push	r28
    7fba:	c8 2f       	mov	r28, r24
    7fbc:	e5 df       	rcall	.-54     	; 0x7f88 <getch>
    7fbe:	c1 50       	subi	r28, 0x01	; 1
    7fc0:	e9 f7       	brne	.-6      	; 0x7fbc <getNch+0x4>
    7fc2:	cf 91       	pop	r28
    7fc4:	ed cf       	rjmp	.-38     	; 0x7fa0 <verifySpace>

00007fc6 <watchdogConfig>:
    "wdr\n"
  );
}*/

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fc6:	e0 e6       	ldi	r30, 0x60	; 96
    7fc8:	f0 e0       	ldi	r31, 0x00	; 0
    7fca:	98 e1       	ldi	r25, 0x18	; 24
    7fcc:	90 83       	st	Z, r25
  WDTCSR = x;
    7fce:	80 83       	st	Z, r24
    7fd0:	08 95       	ret

00007fd2 <appStart>:
    "wdr\n"
  );
}*/

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fd2:	e0 e6       	ldi	r30, 0x60	; 96
    7fd4:	f0 e0       	ldi	r31, 0x00	; 0
    7fd6:	88 e1       	ldi	r24, 0x18	; 24
    7fd8:	80 83       	st	Z, r24
  WDTCSR = x;
    7fda:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    7fdc:	ee 27       	eor	r30, r30
    7fde:	ff 27       	eor	r31, r31
    7fe0:	09 94       	ijmp
